cbuffer PerObject : register(b1) {
	float4x4 model;
	float4 color;
	float4 metallic_roughness;
};

struct VS_OUTPUT {
	float4 pos : SV_POSITION;
	float3 world_pos : POSITION0;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD1;
};

VS_OUTPUT  vs_main(float3 in_pos : POSITION, float3 in_normal : NORMAL, float2 in_uv : TEXCOORD) {
	VS_OUTPUT output;
	float3 obj_pos = in_pos;
	
	float4 world_pos = mul(float4(obj_pos.x, obj_pos.y, obj_pos.z, 1.0f), model);
	float4 view_pos = mul(world_pos, view);
	float4 clip_pos = mul(view_pos, projection);
	output.pos = clip_pos;
	output.normal = normalize(mul(float4(in_normal.x, in_normal.y, in_normal.z, 0.0f), model).xyz);
	output.world_pos = world_pos.xyz;
	output.uv = in_uv;

	return output;
}

SurfaceShaderOutput surfaceFunc(VS_OUTPUT input) {
	SurfaceShaderOutput output;
	float3 x_color = main_texture.Sample(wrap_sampler, input.world_pos.zy / 8).rgb;
	float3 y_color = main_texture.Sample(wrap_sampler, input.world_pos.xz / 8).rgb;
	float3 z_color = main_texture.Sample(wrap_sampler, input.world_pos.xy / 8).rgb;
	float3 blend_weights = input.normal.rgb;
	blend_weights = blend_weights / (blend_weights.x + blend_weights.y + blend_weights.z);
	// output.albedo = color.rgb * main_texture.Sample(sampler0, input.uv).rgb;
	output.albedo = color.rgb * (x_color * blend_weights.x + y_color * blend_weights.y + z_color * blend_weights.z);
	output.roughness = metallic_roughness.y * 0.9f + 0.1f;
	output.metallic = metallic_roughness.x;
	return output;
}
